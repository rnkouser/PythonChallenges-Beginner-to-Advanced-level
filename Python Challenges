# Python Basics:
# Challenge - 1

# A. Declare variables for the following types: int, float, bool, string, list.
# B. Print out the variables and their types at the terminal.

year = 2023 # type int
price = 10.8 # type float
sold = False # type bool
symbol = 'BTC' # type str
products = ['Smartphone', 'Headphones', 'Smartwatch']  # type list

print(type(year), year)
print(type(price), price)
print(type(sold), sold)
print(type(symbol), symbol)
print(type(products), products)

#----------------------------------------------------------#

# Challenge - 2

Change this script so that it follows the Python naming and style conventions described in PEP8.
myName = Rahila
value=100

"""
This is 
an example of a multiline
comment in Python.
"""

str = 'Hello'
print(str)

# Solution:

my_name = 'Rahila'
value = 100


# This is
# an example of a multiline
# comment in Python.


my_str = 'Hello'
print(my_str)


#----------------------------------------------------------#

# Challenge - 3

# This script contains some syntax errors.
# Modify the script so that it runs without any errors.

best_friend = 'Anne"
print('My best friend is ', best_friend)

age = 18
print(age = 10)

a, 4b = '10', '20'
print(a + 4b)

print('To comment a line of code you # at the beginning of the line.'#)

# Solution:

best_friend = 'Anne'
print('My best friend is ', best_friend)

age = 18
print(age == 10)

a, b = '10', '20'
print(a + b)

print('To comment a line of code you # at the beginning of the line.')

#----------------------------------------------------------#

# Challenge - 4

# Create a new Python script that uses the following operators: =, ==, >=, *, **, /, //, %, +=, *=

a, b = 10, 20
print(a == b)       # => False
print(a >= 100)     # => False
print(2 * 2)        # => 4
print(2 ** 128)     # => 340282366920938463463374607431768211456
print(21 / 6)       # => 3.5
print(21 // 4)      # => 5
print(15 % 2)       # => 1

a += 5
b *= 3

#----------------------------------------------------------#

# Challenge - 5

# Consider the following Python expression:  a = 16 / 2 + 6 / 2 ** 2
# Add parenthesis to change the order of operations so that a is 1.0

a = (16 / (2 + 6) / 2) ** 2
print(a)

#----------------------------------------------------------#

# Challenge - 6

# An IPv6 address is represented using 128 bits.
# Write a Python script that calculates how many IPv6 addresses are available.

ipv6_no = 2 ** 128
print('There are', ipv6_no, 'IPv6 available in the world!')

#----------------------------------------------------------#

# Challenge - 7

# A company's revenue is 45,897,513.
# Calculate the company's profit if the profit represents 12.7% of the revenue.
# Display the profit using 2 decimal places.


sales = 45_897_513
profit = sales * 12.7 / 100
print("Company's profit:",format(profit, '.2f')

#----------------------------------------------------------#

# Challenge - 8

# A junior Python programmer writes the following code snippet and gets surprised that the comparison operator returns False instead of True.

a = 0.1
b = 0.3
print(a * 3 == b) # => False
Your job is to modify the code so that the comparison returns True which is correct.

# Solution:

import math
a = 0.1
b = 0.3
# print(a * 3 == b)  # => False
print(math.isclose(a*3, b)) # => True

#----------------------------------------------------------#
# Python Strings:

# Challenge - 9

# Consider the following string declaration which is part of the output of a  Linux command.
my_str = 'wlo1      Link encap:Ethernet  HWaddr b4:6d:83:77:85:f3'

# Write a Python script that extracts the MAC address (b4:6d:83:77:85:f3) from the string.
# Try to solve the challenge in more than one way.

# SOLUTION 1
mac = my_str[len(my_str)-17:]
print(mac)      # => b4:6d:83:77:85:f3

# SOLUTION 2
mac = my_str[-1:-18:-1]
mac = mac[::-1]     # reverse the string
print(mac)          # => b4:6d:83:77:85:f3


# SOLUTION 3
# Split the string into a list and return the last list element which is the MAC address
mac = my_str.split()[-1]
print(mac)     # => b4:6d:83:77:85:f3

#----------------------------------------------------------#

# Challenge - 10

# Display the following strings literally:

It displayed: "You've got an error!"
\n means a new line.
\ is known as the escape character.

# Solution 1
message = "It displayed: \"You've got an error!\""

# Solution 2
message = 'It displayed: "You\'ve got an error!"'
print(message)


print('\\n means a new line.')
# or
print(r'\n means a new line')  # r'' means a raw string where \ doesn't have a special meaning.


print('\\ is known as the escape character.')

#----------------------------------------------------------#

# Challenge - 11

# Write a Python script that converts foot [ft] to centimeter [cm]. 1 ft = 30.48 cm
# The user will be prompted to enter the value in ft.
# Display the value in cm with 2 decimals, formatted using an f-string.


ft = float(input('Enter distance (in ft):'))
cm = ft * 30.48
print(f'{ft} ft = {cm:.2f} cm')

#----------------------------------------------------------#

# Challenge - 12

# Write a Python script that tests if a string is a palindrome.
# https://en.wikipedia.org/wiki/Palindrome

s1 = 'mom'
print(f'Is s1 palindrome? => {s1 == s1[::-1]}')


s2 = 'eve'
print(f'Is s2 palindrome? => {s2 == s2[::-1]}')

s3 = 'Daddy'
print(f'Is s3 palindrome? => {s3 == s3[::-1]}')

#----------------------------------------------------------#

# Challenge - 12

# Write a Python script that tests if a string is a palindrome.
# https://en.wikipedia.org/wiki/Palindrome
# Change the solution of the previous challenge so that both the white spaces and the letter case are ignored when checking if the string is a palindrome.

s1 = 'Rats live on no evil star'
s1 = s1.replace(' ', '')
s1 = s1.lower()
print(f'Is s1 palindrome? => {s1 == s1[::-1]}')


s2 = 'Able was I ere I saw Elba'
s2 = s2.replace(' ', '')
s2 = s2.lower()
print(f'Is s2 palindrome? => {s2 == s2[::-1]}')

#----------------------------------------------------------#

# Challenge - 13

# Write a Python script to get a string made of the first and the last 2 chars from a given string entered by the user.

# Sample String: 'Hello!'
# Expected Result: 'Heo!'

my_str = input('Enter a string(min 2 chars):')
new_str = my_str[:2] + my_str[-2:]
print(new_str)

#----------------------------------------------------------#

# Challenge - 14

# Write a Python program to get a string from a given string where all occurrences of its first character have been changed to '$', except the first character itself.
# Sample String: 'mama'
# Expected Result: 'ma$a'

my_str = input('Enter a string:')
char = my_str[0]
new_str = my_str[1:].replace(char, '$')
new_str = char + new_str
print(new_str)

#----------------------------------------------------------#

# Challenge - 15

# Write a Python program to remove the nth index character from a nonempty string.

n = int(input('Enter the nth index char to remove:'))
my_str = input('Enter the string to change:')
first_part = my_str[0:n]
last_part = my_str[n+1:]
new_str = first_part + last_part
print(new_str)

#----------------------------------------------------------#

# Challenge - 16

# Write a Python script that prompts the user for the radius of a circle and calculates its area.
# Circle's area = pi * r ** 2 where pi = 3.1415
# Using an f-string display the area of the circle with 4 decimal places.

radius = float(input('Enter circle radius:'))
area = 3.1415 * radius ** 2
print(f'The area of a circle with a radius of {radius} is {area:.4f}')

#----------------------------------------------------------#

# Challenge - 17

# Write a Python script that finds all occurrences of a substring in a given string by ignoring the letter case.

my_str = "Welcome to Romania. romania is an awesome country, isn't it? Hello roMania!"
sub_string = "Romania"

# convert string to lowercase
tmp_str = my_str.lower()

# use the count function
count = tmp_str.count(sub_string.lower())
print(f'The substring "Romania" appears {count} times in the string.'

#----------------------------------------------------------#

# Challenge - 18

# Write a Python script that displays a number with a comma (,) as the thousands separator (US and UK format) and with a period(.) as the thousands separator (EU format).
# Sample input number: 1234567
# Expected Result: 1,234,567 and 1.234.567
# Read the f-strings documentation if needed: https://docs.python.org/3/reference/lexical_analysis.html#f-strings


n = 12384756982
n_comma = f'{n:,}'

print(n_comma)

print(n_comma.replace(',', '.'))

#----------------------------------------------------------#

# Flow Control and Loops

# Challenge - 19

# Create a Python script that asks the user for a number and then prints out a list of all the divisors of each number
# less than the asked number.


x = int(input("Enter a number: "))
all_divisors = list()
for i in range(2, x//2+1):
    if x % i == 0:
        all_divisors.append(i)

print(all_divisors)

#----------------------------------------------------------#

# Challenge - 20

# Write a Python program to check if an integer (x) is the power of another integer (y). Prompt the user to input both integers.
# Input: 16, 2
# Output: 4 ** 2 = 16


x = int(input("Enter a number x: "))
y = int(input(f"Enter a number y to test if x which is {x} is a power of y: "))

found = False

for k in range(2, x//2):
    if y ** k == x:
        print(f"{y} ** {k} = {x}")
        found = True
        break
else:
    print(f'{x} is not the power of {y}'

#----------------------------------------------------------#

# Challenge - 21

# Write a Python program that counts and displays the vowels of a given string ignoring the case.

vowels = 'aeiou'
my_str = 'Cogito, ergo sum.'

count = 0
for v in vowels:
    if v in my_str.lower():
        count += my_str.count(v)

print(f'Total number of vowels: {count}'

#----------------------------------------------------------#

# Challenge - 22

# Write a Python script that checks if a triangle is equilateral, isosceles or scalene.
# The user will be prompted for the triangle sides.
# Note:
# An equilateral triangle is a triangle in which all three sides have the same length.
# An isosceles triangle is a triangle that has two equal sides.
# A scalene triangle is a triangle that has three unequal sides.

# Input: Enter the lengths of the triangle sides:
# x: 6
# y: 8
# z: 12
# Expected Output: Scalene triangle.

# Solution:

a, b, c = input('Enter the lengths of the triangle sides [Example: 10 20 30]:').split()
a, b, c = float(a), float(b), float(c)
if a == b == c:
    print("Equilateral triangle.")
elif a == b or b == c or a == c:
    print("Isosceles triangle.")
else:
    print("Scalene triangle.")

#----------------------------------------------------------#

# Challenge - 23

# Write a Python program that calculates and displays the sum, the product and the average of n float numbers entered by the user, each on a separate line. Enter 0 to finish.

print("Enter some floats to calculate their sum, product and average. Input 0 to exit.")

count = 0
sum = 0.0
product = 1

while True:
	number = float(input(''))
	if number == 0:
		break

	sum += number
	product *= number
	count += 1

if count < 2:
	print("Enter at least two numbers.")
else:
	print(f'Sum, product and average are: {sum}, {sum/count}, {product}')

#----------------------------------------------------------#

# Challenge - 24

# Given the string s1, write a program to return the sum and the average of the digits that appear in the string, ignoring all other characters.
# Input: Python31py50
# Output: Sum: 9, Average: 2.25

my_str = 'Python31py50'

total, count = 0, 0
for char in my_str:
    if char.isdigit():
        total += int(char)
        count += 1

print(f'Sum: {total}\nAverage: {total/count}')

#----------------------------------------------------------#

# Challenge - 25

# Write a Python program that displays the multiplication table (from 1 to 10) of a specific integer number entered by the user.

n = int(input("Enter an integer number: "))

for i in range(1,11):
   print(f'{n} x {i} = {n * i}')

#----------------------------------------------------------#

# Challenge - 26

# Write a Python script that displays the following pattern from 1 to n where n is entered by the user.
# If the user enters 6 it will display:

#    1
#    22
#    333
#    4444
#    55555
#    666666


n = int(input('Enter whole number:'))
for i in range(n + 1):
    print(str(i) * i)

#----------------------------------------------------------#

# Challenge - 27

# Write a Python program that finds the common characters that appear in two given strings.

s1 = 'Hello you!'
s2 = 'python'

common_chars = ''
for c1 in s1:
    if c1 in s2:
        if c1 not in common_chars: # adding the common char only once
            common_chars += c1

print(f'Common characters: {common_chars}')

#----------------------------------------------------------#

# Challenge - 28

# Write a Python program that iterates over the integers from 1 to 50.
# For multiples of three print "Foo" instead of the number and for multiples of five print "Bar".
# For numbers that are multiples of both three and five print "FooBar".

for x in range(51):
    if x % 3 == 0 and x % 5 == 0:
        print("FooBar")
        continue
    elif x % 3 == 0:
        print("Foo")
        continue
    elif x % 5 == 0:
        print("Bar")
        continue
    print(x)

#----------------------------------------------------------#

# Challenge - 29

# Write a Python script that prints out the Fibonacci series up to a given number n.
# Fibonacci Series: https://www.mathsisfun.com/numbers/fibonacci-sequence.html
# Example: if n is 23 it will print out 0, 1, 1, 2, 3, 5, 8, 13, 21


# https://www.mathsisfun.com/numbers/fibonacci-sequence.html

n = 100
a, b = 0, 1
while a <= n:
    print(a, ' ', end=' ')
    a, b = b, a + b

#----------------------------------------------------------#

# Challenge - 30

# Write a Python script that draws the following pattern using for loops.

#        *
#        * *
#        * * *
#        * * * *
#        * * * * *
#        * * * *
#        * * *
#        * *
#        *


n = 10
for i in range(n):
    for j in range(i):
        print ('* ', end='')
    print('')

for i in range(n, 0, -1):
    for j in range(i):
        print('* ', end='')
    print('')


#----------------------------------------------------------#

# Lists  

# Challenge - 31

# Create a Python script that removes all the occurrences of a given element of a list.

l1 = [1, 2, 1, 1, 2, 3, 1, 5, 3, 5, 1]

# item to remove from the list
n = 1
while n in  l1:
    l1.remove(n)

print(l1)

#----------------------------------------------------------#

# Challenge - 32

# Create a Python script that removes all the elements of a list that are duplicate.

l1 = [1, 2, 1, 1, 2, 3, 1, 5, 3, 5, 1]
unique_list = []
for item in l1:
    if item not in unique_list:
        unique_list.append(item)

print(unique_list)

#----------------------------------------------------------#

# Challenge - 33

# Consider the following string: nums = '10,20,30,40,50'
# Create a Python script that creates a list of integers from the string.
# The resulting list will be: [10, 20, 30, 40, 50]

nums = '10,20,30,40,50'
nums_list = nums.split(',')
print(nums_list)  # => ['10', '20', '30', '40', '50']

nums1 = [int(n) for n in nums_list]
print(nums1)    # => [10, 20, 30, 40, 50]

#----------------------------------------------------------#

# Challenge - 34

# Write a Python script that finds all numbers that are divisible by 7 but are not a multiple of 5, between 1500 and 3200 (both included).
# The numbers obtained should be printed in a comma-separated sequence (CSV) on a single line.

nums = list()

for i in range(1500, 3201):
    if i % 7 == 0 and i % 5 != 0:
        nums.append(str(i))

print(','.join(nums))

#----------------------------------------------------------#

# Challenge - 35

# Write a program that prompts the user for a long string containing multiple words separated by whitespaces and prints back the same string with the words in backward order.
# For example, say I type the string: My name is Rahila
# Then the script should print out: Rahila is name My

words = input('Enter some words:')
words_list =  words.split(' ')
# print(words_list)
words_reversed = ' '.join(reversed(words_list))
print(words_reversed)

#----------------------------------------------------------#

# Challenge - 36

# Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a hyphen-separated sequence after sorting them alphabetically.
# Sample input string : green-red-yellow-black-white
# Expected Result : black-green-red-white-yellow

string = input("Enter a hyphen-separated string: ")
words = string.split("-")
sorted_words = sorted(words)
sorted_str = "-".join(sorted_words)

print(sorted_str)

#----------------------------------------------------------#

# Challenge - 37

# Write a Python program that accepts as input a sequence of words separated by one or more whitespaces and prints out the same words with the letters in reversed order. 
# Do not use list comprehension.
# Sample input string: I love cat and dogs
# Expected Result: I evol tac dna sgod

string = input("Enter a few words separated by whitespaces: ")
words = string.split()

# reverse the letters in each word
i = 0
for w in words:
    words[i] = w[::-1]
    i += 1

new_str = ' '.join(words)

print(new_str)

#----------------------------------------------------------#

# Challenge - 38

# Write a Python program that accepts a hyphen-separated sequence of words as input and prints
# the words in a hyphen-separated sequence after sorting them alphabetically.


string = input("Enter a few words separated by whitespaces: ")
words = string.split()

# reverse the letters in each word
words = [w[::-1] for w in words]

new_str = ' '.join(words)

print(new_str)

#----------------------------------------------------------#

# Challenge - 39

# Create a Python script that calculates and displays the number of occurrences of each element of a list.
# Sample list: list('mamma mia mm')
# Expected Result:
m ---> 6
a ---> 3
---> 2
i ---> 1

l1 = list('mama mia mm')
tmp_list = list()
for item in set(l1):
    count = l1.count(item)
    tmp_list.append((item, count))

# sort list by the second element of the tuple
tmp_list.sort(key=lambda x:x[1], reverse=True)
# print(tmp_list)

for item in tmp_list:
    print(f'{item[0]} ---> {item[1]}')

#----------------------------------------------------------#

# Challenge - 40

# Consider a list of words(strings). Write a Python script that generates a list of tuples where the first element of the tuple is the word in the list 
# and the second element is its length.
# Use list comprehension if possible.

# Sample List: words = ['Python', 'Java', 'C++', 'Golang', 'Solidity', 'Bash']
# Expected Result: [('Python', 6), ('Java', 4), ('C++', 3), ('Golang', 6), ('Solidity', 8), ('Bash', 4)]


words = ['Python', 'Java', 'C++', 'Golang', 'Solidity', 'Bash']

words_and_length = [(w, len(w)) for w in words]

print(words_and_length)

#----------------------------------------------------------#
